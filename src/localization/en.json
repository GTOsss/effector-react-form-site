{
  "global": {
    "navItemExamples": "Examples"
  },
  "index": {
    "h1": "React Effector Form"
  },
  "examples": {
    "simpleForm": {
      "title": "Simple form"
    },
    "onchange": {
      "title": "OnChange form handler",
      "description": "An example that implements the following features: {br}onchange form handler {br}debounced request to server (500ms)."
    },
    "initialValues": {
      "title": "Initial values"
    },
    "initialValuesAdvanced": {
      "title": "Initial values advanced",
      "description": "An advanced example that implements the following features: {br} initial values, {br}reset to initial values, {br} clear form."
    },
    "setValues": {
      "title": "Set values"
    },
    "setValuesAdvanced": {
      "title": "Set values advanced",
      "description": "An advanced example that implements the following features: {br}loading a user, {br}changing a user, {br}saving a user, {br}checking that the user was changed, {br}canceling changes (resetting)"
    },
    "fieldLevelValidation": {
      "title": "Field level validation"
    },
    "formLevelValidation": {
      "title": "Form level validation"
    },
    "mixValidation": {
      "title": "Mix validation",
      "description": "A mix of field-level and form-level validations."
    },
    "setError": {
      "title": "Set error",
      "description": "Set field error. {br} Submit is not blocked when outer errors are set. {br} After the change, errors are hidden, but still remain in the form state. {br} After submit, errors will be visible again until the fields change. {br} This logic is set by default and it is most suitable for server side validation."
    },
    "serverSideValidation": {
      "title": "Server side validation",
      "description": "An example that implements the following features: {br}sync field level validate, {br}async (server side) validate,  {br} username test already taken and min length for firstName is  4 characters."
    },
    "virtualized": {
      "title": "Virtualized",
      "description": "An example that implements the following features: {br}virtualized list with 1000 inputs, {br}validate and scroll to first invalid input."
    },
    "wizard": {
      "title": "Wizard"
    },
    "fieldArray": {
      "title": "Field array"
    },
    "fieldArrayNested": {
      "title": "Field array nested"
    },
    "fieldArrayVirtualized": {
      "title": "Field array virtualized"
    },
    "remoteSubmit": {
      "title": "Remote submit"
    },
    "mapSubmit": {
      "title": "Map submit",
      "description": "Changing data before submitting the form."
    },
    "v1": {
      "simpleFormLocal": {
        "title": "Simple form local",
        "description": "Simple form with values in local state."
      },
      "simpleFormGlobal": {
        "title": "Simple form global",
        "description": "Simple form with values in global state."
      },
      "initialValues": {
        "title": "Initial values"
      },
      "initialValuesAdvanced": {
        "title": "Initial values advanced",
        "description": "An advanced example that implements the following features: {br} initial values, {br}reset to initial values, {br} clear form."
      },
      "setValuesLocal": {
        "title": "Set values local",
        "description": "Set values local state level."
      },
      "setValuesGlobal": {
        "title": "Set values global",
        "description": "Set values global state level."
      },
      "setValuesAdvanced": {
        "title": "Set values advanced",
        "description": "An advanced example that implements the following features: {br}loading a user, {br}changing a user, {br}saving a user, {br}checking that the user was changed, {br}canceling changes (resetting)"
      },
      "fieldLevelValidation": {
        "title": "Field level validation"
      },
      "formLevelValidation": {
        "title": "Form level validation"
      },
      "mixValidation": {
        "title": "Mix validation",
        "description": "A mix of field-level and form-level validations."
      },
      "setErrorLocal": {
        "title": "Set error local",
        "description": "Set field error local state level. {br} Submit is not blocked when outer errors are set. {br} After the change, errors are hidden, but still remain in the form state. {br} After submit, errors will be visible again until the fields change. {br} This logic is set by default and it is most suitable for server side validation."
      },
      "setErrorGlobal": {
        "title": "Set error global",
        "description": "Set field error global state state. {br} Submit is not blocked when outer errors are set. {br} After the change, errors are hidden, but still remain in the form state. {br} After submit, errors will be visible again until the fields change. {br} This logic is set by default and it is most suitable for server side validation."
      },
      "serverSideValidation": {
        "title": "Server side validation",
        "description": "An example that implements the following features: {br}sync field level validate, {br}async (server side) validate, {br} username test already taken and min length for firstName is  4 characters"
      },
      "virtualized": {
        "title": "Virtualized",
        "description": "An example that implements the following features: {br}virtualized list with 1000 inputs, {br}validate and scroll to first invalid input."
      },
      "onchange": {
        "title": "OnChange form handler",
        "description": "An example that implements the following features: {br}onchange form handler {br}debounced request to server (500ms)."
      },
      "wizard": {
        "title": "Wizard"
      },
      "fieldArray": {
        "title": "Field array"
      },
      "fieldArrayNested": {
        "title": "Field array nested"
      },
      "fieldArrayVirtualized": {
        "title": "Field array virtualized"
      },
      "remoteSubmit": {
        "title": "Remote submit"
      },
      "mapSubmit": {
        "title": "Map submit",
        "description": "Changing data before submitting the form."
      }
    }
  },
  "components": {
    "all": {
      "ofForm": "form",
      "ofTheForm": "of the form",
      "ofFieldArray": "field array",
      "usageExamples": "Usage examples:",
      "usageExample": "Usage example:",
      "and": "and",
      "Result": "Result:",
      "here": "here"
    },
    "pages": {
      "createForm": {
        "methodForCreating": "Method for creating",
        "Arguments": "Arguments",
        "Formula": "Formula",
        "formName": "form name",
        "validateDescription1st": "Accepts the values ​​of form fields Values ​​and an object with additional parameters",
        "validateDescription2nd": "Returns an object with invalid field errors",
        "mapSubmitDescription": "a function that transforms data that received from the form fields before passing it to the onSubmit function",
        "onSubmitDescription1st": "a function that fires on a form submit event",
        "onSubmitDescription2nd": ". Receives converted data from mappedValues ​​function (if specified) or directly data from form fields and an object with",
        "onSubmitGuardDescription": "before the onSubmit function is executed, the value of this field is checked. By default, it contains a predicate function that checks if there are validation errors in form fields. If there are no errors, it returns true and onSubmit is triggered. You can pass your own predicate function that will accept the values ​​of the form fields and an object with",
        "onChangeDescription" : "a function that`s triggered when the form fields change. Accepts form field values ​​and an object with",
        "onChangeGuardFnDescription": "before the onChange function is executed, the value of this field is checked. By default, it contains a predicate function that checks if there are validation errors in form fields. If there are no errors, it will return true and onChange will be fired. You can pass your own predicate function that will accept the values ​​of the form fields and an object with",
        "initialValuesDescription": "takes initial values of the form",
        "initialMetaDescription1st": "takes initial values of the form`s",
        "initialMetaDescription2nd": ".",
        "domainDescription": "takes the domain the form`s stores and events will be created",
        "resetOuterErrorsBySubmitDescription": "takes true / false. Determines whether outer form errors should be cleared on the onSubmit event. The default is correct.",
        "resetOuterErrorsByOnChangeDescription": "takes true / false. Determines whether outer form errors should be cleared on the onChange event. The default is correct."
      },
      "createFieldArray": {
        "methodForCreating": "Method for creating",
        "Formula": "Formula",
        "Arguments": "Arguments",
        "form": "the form",
        "takes": "takes",
        "formDescription": "on the basis of which the array will be created.",
        "domainDescription": "takes the domain the array`s stores and events will be created"
      },
      "Form": {
        "description1st": "Form is a collection of stores and events designed for comfortable synchronization of html-form data and the effector state of your application. Upon ",
        "initialization": "initialization",
        "description2nd": ", an object is returned with a set of interconnected API effector units and utilities. As with all objects, they are accessible through the '.', But sometimes in the examples below we will use them through the useForm hook for convenience. We have described in more detail what fields are available through this hook ",
        "here": "here" 
      },
      "$values": {
        "storeWith": "Store with values of the",
        "Using": "Using",
        "recordingFromOther": "Recording values ​​from other units"
      },
      "$errorsInline": {
        "description1st": "Store containing validation errors. These can be errors generated by the",
        "validationFunction": "validation function",
        "description2nd": "or errors added manually using the",
        "end": " methods."
      },
      "$outerErrorsInline": {
        "description1st": "Stor for",
        "serverValidation": "server validation",
        "description2nd": "errors. Unlike errors in",
        "description3rd": "do not block form submissions. After changing the field values, external errors are hidden, but remain in the form state. Once submitted, the errors will be displayed again until the fields change.",
        "description4th": "You can set external errors using the",
        "end": "setters."
      },
      "$fieldsInline": {
        "description1st": "Store containing an object with metadata about",
        "description2nd": " fields.",
        "Properties": "Свойства",
        "activeDescription": "true when focus is set on the form element corresponding to the field.",
        "touchedDescription": "true if there was an interaction (click) with the form element after rendering. The default is false.",
        "changedDescription": "true, если данные поля изменялись с момента инициализации.",
        "blurredDescription": "changes to true when the element loses focus. Remains in this state until the next reinitialization of the form. The isShowError and isShowInnerError flags are calculated based on this value. We will tell you more about them" ,
        "here": "here",
        "touchedAfterOuterErrorDescription1st": "changes to true when a form element is clicked and if",
        "touchedAfterOuterErrorDescription2nd": "has a field with an error for that element. Resubmitting the form resets the value to false.",
        "changedAfterOuterErrorDescription1st": "changes to true when the values ​​of the form element have been changed and if",
        "changedAfterOuterErrorDescription2nd": "has a field with an error for that element. Resubmitting the form resets the value to false.",
        "blurredAfterOuterErrorDescription1st": "changes to true when the form element loses the focus and if",
        "blurredAfterOuterErrorDescription2nd": "has a field with an error for that element. Resubmitting the form resets the value to false. The isShowError and isShowOuterError flags are calculated based on this value. We will tell you more about them",
        "validateDescription": "contains a validation function for a form element."
      },
      "$form": {
        "description": "Store that contains the main state of the",
        "Properties": "Properties:",
        "submittedDescription": "reports whether the form has been submitted.",
        "hasErrorDescription": "reports whether the form has errors generated by the validation function.",
        "hasOuterErrorDescription": "reports if there are external errors in"
      },
      "$meta": {
        "description1st": "Stor with form metadata that can be used to trigger various scripts on the onSubmit event. They can be passed both during",
        "formInitialization": "form initialization",
        "description2nd": "and dynamically through the",
        "useFormHook": "useForm hook"
      },
      "$allFormState": {
        "description": "Store that contains data from all other stores of the form"
      },
      "setValue": {
        "description1st": "Allows you to assign a value to one form field",
        "description2nd": "As you can see from the example, if the form contains an object with nested fields, there are two options for writing field: a string containing the path to the final property of the object through a dot and an array of strings."
      },
      "setValues": {
        "description": "Writes new object with values to the"
      },
      "setOrDeleteError": {
        "description": "Helps to directly set an error in form fields by replacing a validator error, or remove an error if you do not pass an error field."
      },
      "setErrorsInlineState": {
        "description1st": "Lets you to set the object with errors for form fields. The fundamental difference from the",
        "description2nd": "method is that setOrDeleteError sets the error value for one field without affecting other fields. setErrorsInlineState, on the other hand, completely overwrites the object in the form's",
        "description3rd": "store with the object that passed as an argument.",
        "description4th": "Takes an object, where the keys are the names of the form fields, and the values ​​are the error texts."
      },
      "setFieldState": {
        "description1st": "Lets you to set value in the",
        "description2nd": "Let's say we want to set an error with the text 'Required field' in a form field when initializing the application as a reminder that this field is required.",
        "description3rd": "As you can see, no error appeared during initialization, although we added it to the form. This is because the isShowError flag depends on the 'blurred' flag in",
        "description4th": "Let's try setting the 'blurred' of the 'name' field to true:",
        "description5th": "We already told in more detail about all the fields of the $ fieldsInline store"
      },
      "setSubmitted": {
        "description1st": "Sets the passed value to the field 'submitted' of the",
        "description2nd": " store. Takes true or false."
      },
      "resetOuterFieldStateFlags": {
        "description1st": "Resets the",
        "description2nd": " store's blurredAfterOuterError, changedAfterOuterError, touchedAfterOuterError fields to their default values."
      },
      "resetOuterErrors": {
        "description": "Sets an empty object to the"
      },
      "setOrDeleteOuterError": {
        "description1st": "Sets the error object to",
        "description2nd": ". You can remove the error by not passing the 'error' field."
      },
      "setOuterErrorsInlineState": {
        "description1st": "Lets you to set an object with external errors for form fields. Similar to",
        "description2nd": "but for"
      },
      "validateForm": {
        "description1st": "Lets you to manually run the validation function passed on form initialization. Let's try to remind the user after 3 seconds which fields to fill in by calling validateForm. We must remember that the isShowError flag will not be set to true until the 'blurred' form field is true. Let's set it up manually using the",
        "description2nd": "method.",
        "resetTimer": "Reset timer"
      },
      "submit": {
        "description": "Method for submitting the form"
      },
      "reset": {
        "description": "Resets the form to the initial state."
      },
      "onSubmit": {
        "description": "Sets a function for the Submit event of a form. You can specify it in the"
      }
    }
  }
}
