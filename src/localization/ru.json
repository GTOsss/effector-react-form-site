{
  "index": {
    "h1": "h1 ru"
  },
  "global": {
    "navItemExamples": "Примеры"
  },
  "components": {
    "all": {
      "ofForm": "формы",
      "ofTheForm": "формы",
      "ofFieldArray": "массива полей",
      "usageExamples": "Примеры использования:",
      "usageExample": "Пример использования:",
      "and": "и",
      "Result": "Результат:",
      "here": "здесь"
    },
    "pages": {
      "createForm": {
        "methodForCreating": "Метод для создания",
        "Arguments": "Аргументы",
        "Formula": "Формула",
        "formName": "название формы",
        "validateDescription1st": "функция для валидации полей формы. Принимает значения полей формы Values и объект с дополнительными параметрами",
        "validateDescription2nd": "Возвращает объект с ошибками невалидных полей формы",
        "mapSubmitDescription": "функция, преобразующая данные, полученные из полей формы, перед передачей их в функцию onSubmit",
        "onSubmitDescription1st": "функция, которая срабатывает на событии",
        "onSubmitDescription2nd": "формы. Получает преобразованные данные из функции mappedValues (если она указана) либо напрямую данные из полей формы и объект",
        "onSubmitGuardDescription": "перед выполнением функции onSubmit, проверяется значение этого поля. По умолчанию содержит функцию-предикат, которая проверяет, есть ли ошибки валидации в полях формы. Если ошибок нет, возвращает true и запускается onSubmit. Можно передать свою функцию-предикат, которая будет принимать значения полей формы и объект",
        "onChangeDescription": "функция, которая срабатывает при изменении полей формы. Принимает значения полей формы и объект",
        "onChangeGuardFnDescription": "перед выполнением функции onChange,проверяется значение этого поля. По умолчанию содержит функцию-предикат, которая проверяет, есть ли ошибки валидации в полях формы. Если ошибок нет, возвращает true и запускается onChange. Можно передать свою функцию-предикат, которая будет принимать значения полей формы и объект",
        "initialValuesDescription": "принимает начальные значения формы",
        "initialMetaDescription1st": "принимает начальные значения",
        "initialMetaDescription2nd": " формы.",
        "domainDescription": "принимает домен, в котором будут созданы сторы и события формы",
        "resetOuterErrorsBySubmitDescription": "принимает true/false. Определяет, нужно ли сбрасывать внешние ошибки формы, на событии onSubmit. Значение по умолчанию true.",
        "resetOuterErrorsByOnChangeDescription": "принимает true/false. Определяет, нужно ли сбрасывать внешние ошибки формы, на событии onChange. Значение по умолчанию true."
      },
      "createFieldArray": {
        "methodForCreating": "Метод для создания",
        "Formula": "Формула",
        "Arguments": "Аргументы",
        "form": "форму",
        "takes": "принимает",
        "formDescription": ", на основании полей которой будет создан массив.",
        "domainDescription": "принимает домен, в котором будут созданы сторы и события массива"
      },
      "Form": {
        "description1st": "Форма - это совокупность сторов и ивентов, предназначенная для комфортной синхронизации данных html-форм и effector стейтом вашего приложения. При",
        "initialization": "инициализации",
        "description2nd": ", возвращается объект с совокупностью взаимосвязанных юнитов API effector и утилит. Как и во всех объектах, они доступны через `.`, но, иногда, в примерах ниже мы будем использовать их через хук useForm для большего удобства. Более подробно, какие поля доступны через этот хук, мы описали",
        "here": "здесь"
      },
      "$values": {
        "storeWith": "Стор со значениями",
        "Using": "С использованием",
        "recordingFromOther": "Запись значений из других юнитов"
      },
      "$errorsInline": {
        "description1st": "Стор, содержащий ошибки валидации. Это могут быть как ошибки, созданные",
        "validationFunction": "функцией валидации",
        "description2nd": "так и ошибки, добавленные вручную с помощью методов",
        "end": "."
      },
      "$outerErrorsInline": {
        "description1st": "Стор, предназначенный для ошибок",
        "serverValidation": "серверной валидации",
        "description2nd": ". В отличие от ошибок в",
        "description3rd": "внешние ошибки не блокируют отправку формы. После изменения значений полей, внешние ошибки скрываются, но остаются в состоянии формы. После отправки ошибки будут отображаться снова, пока поля не изменятся.",
        "description4th": "Установить внешние ошибки можно при помощи сетеров",
        "end": "."
      },
      "$fieldsInline": {
        "description1st": "Стор, содержащий объект с метаданными о полях",
        "description2nd": ".",
        "Properties": "Properties",
        "activeDescription": "true, когда на элемент формы, соответствующий полю, установлен фокус.",
        "touchedDescription": "true, если было взаимодействие(клик) с элементом формы после рендера. По умолчанию false.",
        "changedDescription": "true, если данные поля изменялись с момента инициализации.",
        "blurredDescription": "меняет значение на true при потере фокуса на элементе. Остаётся в этом состоянии до следующей реинициализации формы. В зависимости от значения этого свойства формируются флаги isShowError и isShowInnerError, о которых говорится",
        "here": "здесь",
        "touchedAfterOuterErrorDescription1st": "меняет значение на true при клике на элемент формы, если в",
        "touchedAfterOuterErrorDescription2nd": "есть поле с ошибкой этого элемента. Повторная отправка формы сбрасывает значение на false.",
        "changedAfterOuterErrorDescription1st": "меняет значение на true при клике на элемент формы, если в",
        "changedAfterOuterErrorDescription2nd": "есть поле с ошибкой этого элемента. Повторная отправка формы сбрасывает значение на false.",
        "blurredAfterOuterErrorDescription1st": "меняет значение на true при потере фокуса на элементе формы, если в",
        "blurredAfterOuterErrorDescription2nd": "есть поле с ошибкой этого элемента. Повторная отправка формы сбрасывает значение на false. В зависимости от значения этого свойства формируются флаги isShowError и isShowOuterError, подробнее о которых мы говорим",
        "validateDescription": "содержит функцию валидации для элемента формы."
      },
      "$form": {
        "description": "Стор, хранящий основное состояние",
        "Properties": "Свойства",
        "submittedDescription": "сообщает о том, была ли форма отправлена.",
        "hasErrorDescription": "сообщает о том, есть ли в форме ошибки, созданые функцией валидации.",
        "hasOuterErrorDescription": "сообщает о том, есть ли внешние ошибки в "
      },
      "$meta": {
        "description1st": "Стор с метаданными формы, которые могут быть использованы для запуска различных сценариев по событию onSubmit. Их можно передать как при",
        "formInitialization": "инициализации формы",
        "description2nd": "Так и динамически через",
        "useFormHook": "хук useForm"
      },
      "$allFormState": {
        "description": "Стор, содержащий в себе данные из всех остальных сторов формы"
      },
      "setValue": {
        "description1st": "Позволяет присвоить значение одному полю формы",
        "description2nd": "Как видно из примера, в случае, если в форме содержится объект со вложенными полями, есть два варианта записи field: строка, содеражщая путь к конечному свойству объекта через точку и массив строк."
      },
      "setValues": {
        "description": "Записывает новый объект со значениям в"
      },
      "setOrDeleteError": {
        "description": "Позволяет напрямую установить ошибку в поля формы, заменив ошибку валидатора, либо удалит ошибку, если не передать поле error."
      },
      "setErrorsInlineState": {
        "description1st": "Позволяет установить объект с ошибками для полей формы. Принципиальное отличие от метода",
        "description2nd": "в том, что setOrDeleteError устанавливает значение ошибки для одного поля, не затрагивая при этом другие поля. setErrorsInlineState же полностью перезаписывает объект в сторе",
        "description3rd": "формы, на переданный в качестве аргумента объект.",
        "description4th": "Принимает объект, где ключами являются имена полей формы, а значениями - тексты ошибок."
      },
      "setFieldState": {
        "description1st": "Позволяет установить значение в",
        "description2nd": "Допустим, мы хотим при инициализации приложения установить ошибку с текстом 'Required field' в поле формы в качестве напоминания, что это поле обязательное.",
        "description3rd": "Как видно, при инициализации никакой ошибки не появилось, хоть мы и добавили её в форму. Так произошло, потому что флаг isShowError зависит от флага 'blurred' в",
        "description4th": "Попробуем установить 'blurred' поля 'name' в значение true:",
        "description5th": "Более подробно обо всех полях стора $fieldsInline мы уже рассказывали"
      },
      "setSubmitted": {
        "description1st": "Выставляет переданное значение в поле 'submitted' стора",
        "description2nd": ". Принимает true либо false."
      },
      "resetOuterFieldStateFlags": {
        "description1st": "Сбрасывает поля blurredAfterOuterError, changedAfterOuterError, touchedAfterOuterError стора",
        "description2nd": "в значения по умолчанию."
      },
      "resetOuterErrors": {
        "description": "Устанавливает пустой объект в"
      },
      "setOrDeleteOuterError": {
        "description1st": "Устанавливает объект с ошибками в",
        "description2nd": ". Можно удалить ошибку, не передав поле 'error'."
      },
      "setOuterErrorsInlineState": {
        "description1st": "Позволяет установить объект с внешними ошибками для полей формы. Является аналогом ",
        "description2nd": "но для"
      },
      "validateForm": {
        "description1st": "Позволяет вручную запустить функцию валидации, переданную при инициализации формы. Попробуем напомнить пользователю через 3 секунды, какие поля следует заполнить, вызвав validateForm. Стоит помнить, что флаг isShowError не будет выставлен в значение true, пока blurred поля формы не будет true. Выставим и его вручную с помощью метода",
        "description2nd": ".",
        "resetTimer": "Сбросить таймер"
      },
      "submit": {
        "description": "Метод для отправки формы"
      },
      "reset": {
        "description": "Полностью сбрасывает форму до состояния иницализации."
      },
      "onSubmit": {
        "description": "Устанавливает функцию для события Submit формы. Вы можете указать её createForm."
      },
      "setMeta": {
        "description": "Принимает один аргумент, который будет записан в"
      }
    }
  }
}
