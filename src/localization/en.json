{
  "global": {
    "navItemExamples": "Examples"
  },
  "index": {
    "h1": "React Effector Form"
  },
  "examples": {
    "simpleForm": {
      "title": "Simple form"
    },
    "onchange": {
      "title": "OnChange form handler",
      "description": "An example that implements the following features: {br}onchange form handler {br}debounced request to server (500ms)."
    },
    "initialValues": {
      "title": "Initial values"
    },
    "initialValuesAdvanced": {
      "title": "Initial values advanced",
      "description": "An advanced example that implements the following features: {br} initial values, {br}reset to initial values, {br} clear form."
    },
    "setValues": {
      "title": "Set values"
    },
    "setValuesAdvanced": {
      "title": "Set values advanced",
      "description": "An advanced example that implements the following features: {br}loading a user, {br}changing a user, {br}saving a user, {br}checking that the user was changed, {br}canceling changes (resetting)"
    },
    "fieldLevelValidation": {
      "title": "Field level validation"
    },
    "formLevelValidation": {
      "title": "Form level validation"
    },
    "mixValidation": {
      "title": "Mix validation",
      "description": "A mix of field-level and form-level validations."
    },
    "setError": {
      "title": "Set error",
      "description": "Set field error. {br} Submit is not blocked when outer errors are set. {br} After the change, errors are hidden, but still remain in the form state. {br} After submit, errors will be visible again until the fields change. {br} This logic is set by default and it is most suitable for server side validation."
    },
    "serverSideValidation": {
      "title": "Server side validation",
      "description": "An example that implements the following features: {br}sync field level validate, {br}async (server side) validate,  {br} username test already taken and min length for firstName is  4 characters."
    },
    "virtualized": {
      "title": "Virtualized",
      "description": "An example that implements the following features: {br}virtualized list with 1000 inputs, {br}validate and scroll to first invalid input."
    },
    "wizard": {
      "title": "Wizard"
    },
    "fieldArray": {
      "title": "Field array"
    },
    "fieldArrayNested": {
      "title": "Field array nested"
    },
    "fieldArrayVirtualized": {
      "title": "Field array virtualized"
    },
    "remoteSubmit": {
      "title": "Remote submit"
    },
    "mapSubmit": {
      "title": "Map submit",
      "description": "Changing data before submitting the form."
    },
    "v1": {
      "simpleFormLocal": {
        "title": "Simple form local",
        "description": "Simple form with values in local state."
      },
      "simpleFormGlobal": {
        "title": "Simple form global",
        "description": "Simple form with values in global state."
      },
      "initialValues": {
        "title": "Initial values"
      },
      "initialValuesAdvanced": {
        "title": "Initial values advanced",
        "description": "An advanced example that implements the following features: {br} initial values, {br}reset to initial values, {br} clear form."
      },
      "setValuesLocal": {
        "title": "Set values local",
        "description": "Set values local state level."
      },
      "setValuesGlobal": {
        "title": "Set values global",
        "description": "Set values global state level."
      },
      "setValuesAdvanced": {
        "title": "Set values advanced",
        "description": "An advanced example that implements the following features: {br}loading a user, {br}changing a user, {br}saving a user, {br}checking that the user was changed, {br}canceling changes (resetting)"
      },
      "fieldLevelValidation": {
        "title": "Field level validation"
      },
      "formLevelValidation": {
        "title": "Form level validation"
      },
      "mixValidation": {
        "title": "Mix validation",
        "description": "A mix of field-level and form-level validations."
      },
      "setErrorLocal": {
        "title": "Set error local",
        "description": "Set field error local state level. {br} Submit is not blocked when outer errors are set. {br} After the change, errors are hidden, but still remain in the form state. {br} After submit, errors will be visible again until the fields change. {br} This logic is set by default and it is most suitable for server side validation."
      },
      "setErrorGlobal": {
        "title": "Set error global",
        "description": "Set field error global state state. {br} Submit is not blocked when outer errors are set. {br} After the change, errors are hidden, but still remain in the form state. {br} After submit, errors will be visible again until the fields change. {br} This logic is set by default and it is most suitable for server side validation."
      },
      "serverSideValidation": {
        "title": "Server side validation",
        "description": "An example that implements the following features: {br}sync field level validate, {br}async (server side) validate, {br} username test already taken and min length for firstName is  4 characters"
      },
      "virtualized": {
        "title": "Virtualized",
        "description": "An example that implements the following features: {br}virtualized list with 1000 inputs, {br}validate and scroll to first invalid input."
      },
      "onchange": {
        "title": "OnChange form handler",
        "description": "An example that implements the following features: {br}onchange form handler {br}debounced request to server (500ms)."
      },
      "wizard": {
        "title": "Wizard"
      },
      "fieldArray": {
        "title": "Field array"
      },
      "fieldArrayNested": {
        "title": "Field array nested"
      },
      "fieldArrayVirtualized": {
        "title": "Field array virtualized"
      },
      "remoteSubmit": {
        "title": "Remote submit"
      },
      "mapSubmit": {
        "title": "Map submit",
        "description": "Changing data before submitting the form."
      }
    }
  },
  "components": {
    "all": {
      "ofForm": "form",
      "ofFieldArray": "field array",
      "usageExamples": "Usage examples:",
      "and": "and"
    },
    "pages": {
      "createForm": {
        "methodForCreating": "Method for creating",
        "Arguments": "Arguments",
        "Formula": "Formula",
        "formName": "form name",
        "validateDescription1st": "Accepts the values ​​of form fields Values ​​and an object with additional parameters",
        "validateDescription2nd": "Returns an object with invalid field errors",
        "mapSubmitDescription": "a function that transforms data that received from the form fields before passing it to the onSubmit function",
        "onSubmitDescription1st": "a function that fires on a form submit event",
        "onSubmitDescription2nd": ". Receives converted data from mappedValues ​​function (if specified) or directly data from form fields and an object with",
        "onSubmitGuardDescription": "before the onSubmit function is executed, the value of this field is checked. By default, it contains a predicate function that checks if there are validation errors in form fields. If there are no errors, it returns true and onSubmit is triggered. You can pass your own predicate function that will accept the values ​​of the form fields and an object with",
        "onChangeDescription" : "a function that`s triggered when the form fields change. Accepts form field values ​​and an object with",
        "onChangeGuardFnDescription": "before the onChange function is executed, the value of this field is checked. By default, it contains a predicate function that checks if there are validation errors in form fields. If there are no errors, it will return true and onChange will be fired. You can pass your own predicate function that will accept the values ​​of the form fields and an object with",
        "initialValuesDescription": "takes initial values of the form",
        "initialMetaDescription1st": "takes initial values of the form`s",
        "initialMetaDescription2nd": ".",
        "domainDescription": "takes the domain the form`s stores and events will be created",
        "resetOuterErrorsBySubmitDescription": "takes true / false. Determines whether outer form errors should be cleared on the onSubmit event. The default is correct.",
        "resetOuterErrorsByOnChangeDescription": "takes true / false. Determines whether outer form errors should be cleared on the onChange event. The default is correct."
      },
      "createFieldArray": {
        "methodForCreating": "Method for creating",
        "Formula": "Formula",
        "Arguments": "Arguments",
        "form": "the form",
        "takes": "takes",
        "formDescription": "on the basis of which the array will be created.",
        "domainDescription": "takes the domain the array`s stores and events will be created"
      },
      "Form": {
        "description1st": "Form is a collection of stores and events designed for comfortable synchronization of html-form data and the effector state of your application. Upon ",
        "initialization": "initialization",
        "description2nd": ", an object is returned with a set of interconnected API effector units and utilities. As with all objects, they are accessible through the '.', But sometimes in the examples below we will use them through the useForm hook for convenience. We have described in more detail what fields are available through this hook ",
        "here": "here" 
      },
      "$values": {
        "storeWith": "Store with values of",
        "Using": "Using",
        "recordingFromOther": "Recording values ​​from other units"
      },
      "$errorsInline": {
        "description1st": "Store containing validation errors. These can be errors generated by the",
        "validationFunction": "validation function",
        "description2nd": "or errors added manually using the",
        "end": " methods."
      }
    }
  }
}
